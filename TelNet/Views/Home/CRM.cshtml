﻿@{
    Layout = "~/Views/Home/_LayoutCRM.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<body class="g-sidenav-show" style="background-color: #FFFF">


        <!-- End Navbar -->
        <div class="container mb-4 container-round">
            <h2 style="padding-left:25px">
                New Applicants
            </h2>
            <table id="myTable" class="table table-hover table-responsive ">
                <thead>
                    <tr style="text-align:center">
                        <th>Application Number</th>
                        <th>Full Name</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var userApplication in Model)
                    {
                        if (userApplication.status == null)
                        {
                            <tr style="text-align:center">
                                <td>@userApplication.applicationNumber</td>
                                <td>@userApplication.fullName</td>
                                <td>@userApplication.status</td>
                                <td>
                                    <!-- Pass the application ID as a data attribute -->
                                    <button class="btn btn-success btn-sm" id="view-application-btn" data-application-id="@userApplication.applicationId">View Application</button>
                                    <button class="btn btn-primary btn-sm" id="approve-application-btn" data-application-id="@userApplication.applicationId">Approve</button>
                                    <button class="btn btn-danger btn-sm deny-application-btn" data-application-id="@userApplication.applicationId">Deny</button>
                                    <button class="btn btn-danger btn-sm delete-application-btn" data-application-id="@userApplication.applicationId">Delete</button>
                                    <!-- Denial Reason Modal -->
                                    <div class="modal fade" id="denialReasonModal" tabindex="-1" role="dialog" aria-labelledby="denialReasonModalLabel" aria-hidden="true">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="denialReasonModalLabel">Deny Application</h5>
                                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                        <span aria-hidden="true">&times;</span>
                                                    </button>
                                                </div>
                                                <div class="modal-body">
                                                    <form id="denialReasonForm">
                                                        <div class="form-group">
                                                            <label for="denialReason">Reason for Denial</label>
                                                            <textarea class="form-control" id="denialReason" rows="3"></textarea>
                                                        </div>
                                                    </form>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                                    <button type="button" class="btn btn-danger" id="submitDenialReason">Submit</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <!-- Modal for viewing application details -->
        <div class="modal fade" id="viewApplicationModal" tabindex="-1" role="dialog" aria-labelledby="viewApplicationModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="viewApplicationModalLabel">Application Details</h5>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" aria-label="Close" id="modalClose">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" id="viewApplicationSection">
                        <!-- Application details go here -->
                    </div>
                </div>
            </div>
        </div>


    </main>

    <script>
        // Add event listener to the table, listening for clicks on buttons with class 'view-application-btn'
        document.querySelector('table').addEventListener('click', function (event) {
            if (event.target.id === 'view-application-btn') {

                // Get the application ID from the data attribute of the clicked button
                var applicationId = event.target.dataset.applicationId;

                // Send an AJAX request to retrieve the application details from the server
                fetch(`/Home/GetApplicationDetails?applicationId=${applicationId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Convert the birthdate from milliseconds to a Date object if it's not null or undefined
                        var formattedBirthdate = data.birthdate ? new Date(parseInt(data.birthdate.substr(6))) : '';

                        // If birthdate is not null or undefined, adjust and format it
                        if (formattedBirthdate) {
                            // Adjust the date to display the correct local date
                            var adjustedBirthdate = new Date(formattedBirthdate.getTime() + formattedBirthdate.getTimezoneOffset() * 60000);

                            // Add one day to the adjusted birthdate
                            adjustedBirthdate.setDate(adjustedBirthdate.getDate() + 1);

                            // Format the date as desired (e.g., YYYY-MM-DD)
                            formattedBirthdate = adjustedBirthdate.toISOString().split('T')[0];
                        }


                        var modalContent = `
                    <div class="row">
                     <div class="col-md-6">
                    <h4>Applicant's ID </h4>
                    </div>
                    <img src="${data.image}" style="width: 400px; height: 200px; padding-left: 100px; padding-bottom: 20px" />

                    <hr>
                        <div class="col-md-6">
                            <h4> Personal Details </h4>
                            <hr>
                            <p><strong>Full Name:</strong> ${data.fullName || ''}</p>
                            <p><strong>Mother's Maiden Name:</strong> ${data.mothersMaidenName || ''}</p>
                            <p><strong>Birthdate:</strong> ${formattedBirthdate || ''}</p>
                            <p><strong>Type of ID:</strong> ${data.typeOfId || ''}</p>
                            <p><strong>ID Number:</strong> ${data.idNumber || ''}</p>
                            <p><strong>Gender:</strong> ${data.gender || ''}</p>
                            <p><strong>Civil Status:</strong> ${data.civilStatus || ''}</p>
                            <p><strong>Citizenship:</strong> ${data.citizenship || ''}</p>
                            <p><strong>Home Ownership:</strong> ${data.homeOwnership || ''}</p>
                            <p><strong>Home Address:</strong> ${data.homeAddress || ''}</p>
                            <p><strong>Plan: </strong> ${data.plans || ''}</p>
                            <p><strong>Payment Method: </strong> ${data.modeOfPayment || ''}</p>
                        </div>
                        <div class="col-md-6">
                            <h4> Work Details </h4>
                            <hr>
                            <p><strong>Employment Status:</strong> ${data.employmentStatus || ''}</p>
                            <p><strong>Total Household Income:</strong> ${data.totalHouseholdIncome || ''}</p>
                            <p><strong>Occupation:</strong> ${data.occupation || ''}</p>
                            <p><strong>Occupation Rank:</strong> ${data.occupationRank || ''}</p>
                            <p><strong>Business Name:</strong> ${data.businessName || ''}</p>
                            <p><strong>Business Address:</strong> ${data.businessAddress || ''}</p>
                            <p><strong>Office Telephone:</strong> ${data.officeTelephone || ''}</p>
                        </div>
                    </div>
                `;

                        // Update the modal body with the populated content
                        document.querySelector('#viewApplicationModal .modal-body').innerHTML = modalContent;

                        // Open the modal
                        $('#viewApplicationModal').modal('show');
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }
        });

        document.querySelectorAll('.delete-application-btn').forEach(button => {
            button.addEventListener('click', function () {
                const applicationId = this.getAttribute('data-application-id');

                // Make an AJAX request to delete the application
                fetch(`/Home/DeleteApplicationStatus?applicationId=${applicationId}`, {
                    method: 'POST'
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Handle the response from the server
                        console.log(data);
                        if (data.success) {
                            // Show SweetAlert for successful deletion
                            Swal.fire('Application Deleted', '', 'success');

                            setTimeout(function () {
                                location.reload();
                            }, 1000); // 2000 milliseconds = 2 seconds

                        } else {
                            // Show error message if deletion fails
                            Swal.fire('Error', data.message, 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        // Show error message if AJAX request fails
                        Swal.fire('Error', 'Failed to delete application.', 'error');
                    });
            });
        });



        function validateForm() {
            // Check if the form is valid
            if (!document.getElementById('applicationForm').checkValidity()) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please make sure all inputs are valid.'
                });
                return false;
            }
            // If the form is valid, return true to allow form submission
            return true;
        }

        // Function to handle form submission
        function submitForm() {
            // Retrieve form data
            let formData = new FormData(document.getElementById('applicationForm'));

            // Send formData to the server using AJAX
            fetch('/Home/CreateApplication', {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(data);

                    // Show SweetAlert for successful submission
                    Swal.fire('Application Submitted', '', 'success');

                    setTimeout(function () {
                        location.reload();
                    }, 1000); // 2000 milliseconds = 2 seconds

                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        // Event listener for Submit button click
        document.getElementById('submitButton').addEventListener('click', function (event) {

            submitForm();
        });


        // Event listener for Next button click
        document.getElementById('nextButton').addEventListener('click', function () {
            document.getElementById('personalInfo').style.display = 'none';
            document.getElementById('employmentInfo').style.display = 'block';
            document.getElementById('additionalInformation').style.display = 'none';
            document.getElementById('nextButton').style.display = 'none';
            document.getElementById('backButton').style.display = 'block';
            document.getElementById('submitButton').style.display = 'block';
        });

        // Event listener for Back button click
        document.getElementById('backButton').addEventListener('click', function () {
            document.getElementById('personalInfo').style.display = 'block';
            document.getElementById('additionalInformation').style.display = 'block';
            document.getElementById('employmentInfo').style.display = 'none';
            document.getElementById('nextButton').style.display = 'block';
            document.getElementById('backButton').style.display = 'none';
            document.getElementById('submitButton').style.display = 'none';
        });


    </script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script>
        // Deny button click event handler
        document.querySelectorAll('.deny-application-btn').forEach(button => {
            button.addEventListener('click', function () {
                // Retrieve the application ID from the button's data attribute
                var applicationId = this.getAttribute('data-application-id');
                // Set the application ID in the denial reason modal for later use
                document.getElementById('submitDenialReason').setAttribute('data-application-id', applicationId);
                // Show the denial reason modal
                $('#denialReasonModal').modal('show');
            });
        });

        // Approve button click event handler
        document.querySelectorAll('#approve-application-btn').forEach(button => {
            button.addEventListener('click', function () {
                // Retrieve the application ID from the button's data attribute
                var applicationId = this.getAttribute('data-application-id');

                // Send an AJAX request to update the application status to "Approved"
                fetch(`/Home/UpdateApplicationStatus?applicationId=${applicationId}&status=Approved`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Handle the response from the server
                        console.log('Application status updated successfully:', data);
                        // Show SweetAlert for approval
                        Swal.fire('Application Approved', '', 'success');
                        // Reload the page to update the table
                        setTimeout(function () {
                            location.reload();
                        }, 1000); // 2000 milliseconds = 2 seconds

                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });
        });

        // Submit denial reason button click event handler
        document.getElementById('submitDenialReason').addEventListener('click', function () {
            // Retrieve the application ID from the button's data attribute
            var applicationId = this.getAttribute('data-application-id');
            // Retrieve the denial reason from the form
            var denialReason = document.getElementById('denialReason').value;

            // Send an AJAX request to update the application status to "Denied" with the reason
            fetch(`/Home/UpdateApplicationStatus?applicationId=${applicationId}&status=Denied&reason=${denialReason}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Handle the response from the server
                    console.log('Application status updated successfully:', data);
                    // Show SweetAlert for denial
                    Swal.fire('Application Denied', '', 'error');
                    // Reload the page to update the table
                    setTimeout(function () {
                        location.reload();
                    }, 1000); // 2000 milliseconds = 2 seconds
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        });
    </script>




    <script>
        // Deny button click event handler
        document.getElementById('denyButton').addEventListener('click', function () {
            // Show denial reason section
            document.getElementById('denialReasonSection').style.display = 'block';
            document.getElementById('viewApplicationSection').style.display = 'none';
            document.getElementById('approveButton').style.display = 'none';
        });
    </script>

    <script>
        $(function () {
            $('#modalClose').on('click', function () {
                $('#viewApplicationModal').modal('hide');
                $('#applicationModal').modal('hide');
            })
        })

    </script>


    <script>
        // JavaScript to show/hide other ID input field based on selection
        document.addEventListener("DOMContentLoaded", function () {
            var typeOfIdSelect = document.getElementById("typeOfId");
            var otherIdInput = document.getElementById("otherIdInput");

            typeOfIdSelect.addEventListener("change", function () {
                if (typeOfIdSelect.value === "Other") {
                    otherIdInput.style.display = "block";
                } else {
                    otherIdInput.style.display = "none";
                }
            });
        });

    </script>

    <script>
        $(document).ready(function () {
            $('#myTable').DataTable();
        });
    </script>
    <script>


        var ctx = document.getElementById("chart-bars").getContext("2d");

        new Chart(ctx, {
            type: "bar",
            data: {
                labels: ["M", "T", "W", "T", "F", "S", "S"],
                datasets: [{
                    label: "Sales",
                    tension: 0.4,
                    borderWidth: 0,
                    borderRadius: 4,
                    borderSkipped: false,
                    backgroundColor: "rgba(255, 255, 255, .8)",
                    data: [50, 20, 10, 22, 50, 10, 40],
                    maxBarThickness: 6
                },],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index',
                },
                scales: {
                    y: {
                        grid: {
                            drawBorder: false,
                            display: true,
                            drawOnChartArea: true,
                            drawTicks: false,
                            borderDash: [5, 5],
                            color: 'rgba(255, 255, 255, .2)'
                        },
                        ticks: {
                            suggestedMin: 0,
                            suggestedMax: 500,
                            beginAtZero: true,
                            padding: 10,
                            font: {
                                size: 14,
                                weight: 300,
                                family: "Roboto",
                                style: 'normal',
                                lineHeight: 2
                            },
                            color: "#fff"
                        },
                    },
                    x: {
                        grid: {
                            drawBorder: false,
                            display: true,
                            drawOnChartArea: true,
                            drawTicks: false,
                            borderDash: [5, 5],
                            color: 'rgba(255, 255, 255, .2)'
                        },
                        ticks: {
                            display: true,
                            color: '#f8f9fa',
                            padding: 10,
                            font: {
                                size: 14,
                                weight: 300,
                                family: "Roboto",
                                style: 'normal',
                                lineHeight: 2
                            },
                        }
                    },
                },
            },
        });


        var ctx2 = document.getElementById("chart-line").getContext("2d");

        new Chart(ctx2, {
            type: "line",
            data: {
                labels: ["Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                datasets: [{
                    label: "Mobile apps",
                    tension: 0,
                    borderWidth: 0,
                    pointRadius: 5,
                    pointBackgroundColor: "rgba(255, 255, 255, .8)",
                    pointBorderColor: "transparent",
                    borderColor: "rgba(255, 255, 255, .8)",
                    borderColor: "rgba(255, 255, 255, .8)",
                    borderWidth: 4,
                    backgroundColor: "transparent",
                    fill: true,
                    data: [50, 40, 300, 320, 500, 350, 200, 230, 500],
                    maxBarThickness: 6

                }],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index',
                },
                scales: {
                    y: {
                        grid: {
                            drawBorder: false,
                            display: true,
                            drawOnChartArea: true,
                            drawTicks: false,
                            borderDash: [5, 5],
                            color: 'rgba(255, 255, 255, .2)'
                        },
                        ticks: {
                            display: true,
                            color: '#f8f9fa',
                            padding: 10,
                            font: {
                                size: 14,
                                weight: 300,
                                family: "Roboto",
                                style: 'normal',
                                lineHeight: 2
                            },
                        }
                    },
                    x: {
                        grid: {
                            drawBorder: false,
                            display: false,
                            drawOnChartArea: false,
                            drawTicks: false,
                            borderDash: [5, 5]
                        },
                        ticks: {
                            display: true,
                            color: '#f8f9fa',
                            padding: 10,
                            font: {
                                size: 14,
                                weight: 300,
                                family: "Roboto",
                                style: 'normal',
                                lineHeight: 2
                            },
                        }
                    },
                },
            },
        });

        var ctx3 = document.getElementById("chart-line-tasks").getContext("2d");

        new Chart(ctx3, {
            type: "line",
            data: {
                labels: ["Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                datasets: [{
                    label: "Mobile apps",
                    tension: 0,
                    borderWidth: 0,
                    pointRadius: 5,
                    pointBackgroundColor: "rgba(255, 255, 255, .8)",
                    pointBorderColor: "transparent",
                    borderColor: "rgba(255, 255, 255, .8)",
                    borderWidth: 4,
                    backgroundColor: "transparent",
                    fill: true,
                    data: [50, 40, 300, 220, 500, 250, 400, 230, 500],
                    maxBarThickness: 6

                }],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index',
                },
                scales: {
                    y: {
                        grid: {
                            drawBorder: false,
                            display: true,
                            drawOnChartArea: true,
                            drawTicks: false,
                            borderDash: [5, 5],
                            color: 'rgba(255, 255, 255, .2)'
                        },
                        ticks: {
                            display: true,
                            padding: 10,
                            color: '#f8f9fa',
                            font: {
                                size: 14,
                                weight: 300,
                                family: "Roboto",
                                style: 'normal',
                                lineHeight: 2
                            },
                        }
                    },
                    x: {
                        grid: {
                            drawBorder: false,
                            display: false,
                            drawOnChartArea: false,
                            drawTicks: false,
                            borderDash: [5, 5]
                        },
                        ticks: {
                            display: true,
                            color: '#f8f9fa',
                            padding: 10,
                            font: {
                                size: 14,
                                weight: 300,
                                family: "Roboto",
                                style: 'normal',
                                lineHeight: 2
                            },
                        }
                    },
                },
            },
        });</script>
    <script>
        var win = navigator.platform.indexOf('Win') > -1;
        if (win && document.querySelector('#sidenav-scrollbar')) {
            var options = {
                damping: '0.5'
            }
            Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
        }</script>
    <!-- Github buttons -->
    <script async defer src="https://buttons.github.io/buttons.js"></script>
    <!-- Control Center for Material Dashboard: parallax effects, scripts for the example pages etc -->
    <script src="~/Content/assets/js/material-dashboard.min.js?v=3.0.0"></script>
</body>

</html>